plugins {
  id 'application'
}

dependencies {
  implementation project(':metafix')

  implementation "org.metafacture:metafacture-biblio:${versions.metafacture}"
  implementation "org.metafacture:metafacture-commons:${versions.metafacture}"
  implementation "org.metafacture:metafacture-csv:${versions.metafacture}"
  implementation "org.metafacture:metafacture-elasticsearch:${versions.metafacture}"
  implementation "org.metafacture:metafacture-files:${versions.metafacture}"
  implementation "org.metafacture:metafacture-flowcontrol:${versions.metafacture}"
  implementation "org.metafacture:metafacture-formatting:${versions.metafacture}"
  implementation "org.metafacture:metafacture-formeta:${versions.metafacture}"
  implementation "org.metafacture:metafacture-html:${versions.metafacture}"
  implementation "org.metafacture:metafacture-io:${versions.metafacture}"
  implementation "org.metafacture:metafacture-javaintegration:${versions.metafacture}"
  implementation "org.metafacture:metafacture-jdom:${versions.metafacture}"
  implementation "org.metafacture:metafacture-json:${versions.metafacture}"
  implementation "org.metafacture:metafacture-linkeddata:${versions.metafacture}"
  implementation "org.metafacture:metafacture-mangling:${versions.metafacture}"
  implementation "org.metafacture:metafacture-monitoring:${versions.metafacture}"
  implementation "org.metafacture:metafacture-plumbing:${versions.metafacture}"
  implementation "org.metafacture:metafacture-runner:${versions.metafacture}"
  implementation "org.metafacture:metafacture-scripting:${versions.metafacture}"
  implementation "org.metafacture:metafacture-statistics:${versions.metafacture}"
  implementation "org.metafacture:metafacture-strings:${versions.metafacture}"
  implementation "org.metafacture:metafacture-triples:${versions.metafacture}"
  implementation "org.metafacture:metafacture-xml:${versions.metafacture}"
  implementation "org.metafacture:metafacture-yaml:${versions.metafacture}"
  implementation "org.metafacture:metamorph:${versions.metafacture}"

  implementation('org.antlr:antlr-runtime') {
    version { strictly versions.antlr }
  }
}

application {
  mainClass = 'org.metafacture.runner.Flux'

  applicationDefaultJvmArgs = [
    "-Dorg.metafacture.metafix.logLevel=INFO"
  ]

  if (project.hasProperty('profile')) {
    def file = project.getProperty('profile') ?: project.name
    def depth = project.hasProperty('profile.depth') ? project.getProperty('profile.depth') : 8

    applicationDefaultJvmArgs += [
      "-XX:FlightRecorderOptions=stackdepth=${depth}",
      "-XX:StartFlightRecording=dumponexit=true,filename=${file}.jfr,settings=profile"
    ]
  }

  startScripts {
    // See https://github.com/metafacture/metafacture-fix/issues/371
    classpath = files('*')
    doNotTrackState('Accessing unreadable inputs is not supported.')
  }
}
